{"ast":null,"code":"let backUrl = 'http://localhost:8080/'; //USER\n\nexport async function checkAdmin() {\n  return await sendGetRequest(backUrl + 'admin');\n}\nexport function setUser(email) {\n  sendPostRequest(backUrl + 'admin', JSON.stringify(\"email:\" + email));\n} //ROUTES\n\nexport async function getRoutes() {\n  return await sendGetRequest(backUrl + 'routes');\n}\nexport async function getRouteById(id) {\n  return await sendGetRequest(backUrl + 'route/' + id);\n}\nexport async function updateRoute(state) {\n  return await sendPostRequest(backUrl + 'route/' + state.oldId, routeToJson(state));\n}\nexport async function checkAvailableRoute(id) {\n  let c = await sendGetRequest(backUrl + 'route/' + id);\n  return !c || Object.keys(c).length === 0;\n}\nexport async function deleteRoute(id, state) {\n  return await sendPostRequest(backUrl + 'delete/route/' + id, routeToJson(state));\n}\n\nfunction convertStopsToInt(stops, allStops) {\n  let result = [];\n\n  for (let i = 0; i < stops.length; i++) {\n    for (let j = 0; j < allStops.length; j++) {\n      if (stops[i] === allStops[j][\"stop_name\"]) {\n        result.push(allStops[j][\"stop_id\"]);\n      }\n    }\n  }\n\n  return result;\n} //STOPS\n\n\nexport async function getStops() {\n  return await sendGetRequest(backUrl + 'stops');\n}\nexport async function updateStop(state) {\n  return await sendPostRequest(backUrl + 'stop/' + state.oldId, stopToJson(state));\n}\nexport async function deleteStop(id, state) {\n  return await sendPostRequest(backUrl + 'delete/stop/' + id, stopToJson(state));\n}\n\nfunction stopToJson(state) {\n  let json = JSON.stringify({\n    \"stop_id\": state.id,\n    \"stop_name\": state.name\n  });\n  console.log(\"SEND POST: \" + json);\n  return json;\n} //EMPLOYEES\n\n\nexport async function getEmployees() {\n  return await sendGetRequest(backUrl + 'employee/all');\n}\nexport async function getEmployee(id) {\n  console.log(\"req is coming\");\n  return await sendGetRequest(backUrl + 'employee/' + id);\n}\nexport async function updateEmployee(state) {\n  return await sendPostRequest(backUrl + 'employee/' + state.oldId, employeeToJson(state));\n}\nexport async function deleteEmployee(id, state) {\n  return await sendPostRequest(backUrl + 'delete/employee/' + id, employeeToJson(state));\n}\n\nfunction employeeToJson(state) {\n  let json = JSON.stringify({\n    \"id\": state.id,\n    \"name\": state.name,\n    \"surname\": state.surname,\n    \"route_number\": state.route_number\n  });\n  console.log(\"SEND POST: \" + json);\n  return json;\n} //REQUESTS\n\n\nfunction sendGetRequest(requestUrl) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: 'Get',\n    headers: {} // body: JSON.stringify({ title: 'React Get Request Example' })\n\n  };\n  return fetch(requestUrl, requestOptions).then(response => response.json()).then(responseData => {\n    return responseData;\n  });\n}\n\nfunction convertTimeTable(timeTable) {\n  let result = [];\n\n  for (let i = 0; i < timeTable.length; i++) {\n    result.push(parseInt(timeTable[i]));\n  }\n\n  return result;\n}\n\nfunction routeToJson(state) {\n  let intStops = convertStopsToInt(state.stops, state.allStops);\n  let intTimeTable = convertTimeTable(state.timeTable.slice(1));\n  return JSON.stringify({\n    \"routeId\": state.number,\n    \"stops\": intStops,\n    \"startTime\": state.startTime,\n    \"endTime\": state.endTime,\n    \"interval\": state.interval,\n    \"type\": typeToInt(state.type),\n    \"timetable\": intTimeTable\n  });\n}\n\nfunction sendPostRequest(url, body) {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n    method: 'Post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: body\n  };\n  return fetch(url, requestOptions).then(response => response.json()).then(responseData => {\n    return responseData;\n  });\n}\n\nfunction typeToInt(type) {\n  switch (type) {\n    case \"Тролейбус\":\n      return 1;\n\n    case \"Автобус\":\n      return 2;\n\n    case \"Трамвай\":\n      return 3;\n\n    default:\n      return 1;\n  }\n}\n\nasync function postData(url = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST',\n    // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors',\n    // no-cors, *cors, same-origin\n    cache: 'no-cache',\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin',\n    // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    redirect: 'follow',\n    // manual, *follow, error\n    referrerPolicy: 'no-referrer',\n    // no-referrer, *client\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n\n  });\n  return await response.json(); // parses JSON response into native JavaScript objects\n}\n\npostData('https://example.com/answer', {\n  answer: 42\n}).then(data => {\n  console.log(data); // JSON data parsed by `response.json()` call\n});","map":{"version":3,"sources":["/home/sadoffnick/Desktop/University_Labs-782d16d9e93f5f21f9b7569cd8b73d90f641c7f6/semester_6/Object-oriented_programming/Labs/Lab_1/FRONT/src/API.js"],"names":["backUrl","checkAdmin","sendGetRequest","setUser","email","sendPostRequest","JSON","stringify","getRoutes","getRouteById","id","updateRoute","state","oldId","routeToJson","checkAvailableRoute","c","Object","keys","length","deleteRoute","convertStopsToInt","stops","allStops","result","i","j","push","getStops","updateStop","stopToJson","deleteStop","json","name","console","log","getEmployees","getEmployee","updateEmployee","employeeToJson","deleteEmployee","surname","route_number","requestUrl","requestOptions","method","headers","fetch","then","response","responseData","convertTimeTable","timeTable","parseInt","intStops","intTimeTable","slice","number","startTime","endTime","interval","typeToInt","type","url","body","postData","data","mode","cache","credentials","redirect","referrerPolicy","answer"],"mappings":"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","sourcesContent":["let backUrl = 'http://localhost:8080/'\n\n\n//USER\n\nexport async function checkAdmin(){\n    return await sendGetRequest(backUrl + 'admin')\n}\n\nexport function setUser(email){\n    sendPostRequest(backUrl + 'admin', JSON.stringify(\"email:\" + email))\n}\n\n\n//ROUTES\n\nexport async function getRoutes() {\n    return await sendGetRequest(backUrl + 'routes');\n}\n\nexport async function getRouteById(id){\n    return await sendGetRequest(backUrl + 'route/' + id);\n}\n\nexport async function updateRoute(state){\n    return await sendPostRequest(backUrl + 'route/' + state.oldId, routeToJson(state))\n}\n\nexport async function checkAvailableRoute(id) {\n    let c = await sendGetRequest(backUrl + 'route/' + id);\n    return (!c) || (Object.keys(c).length === 0)\n}\n\nexport async function deleteRoute(id, state){\n    return await sendPostRequest(backUrl + 'delete/route/' + id,  routeToJson(state))\n}\n\nfunction convertStopsToInt(stops, allStops) {\n    let result = []\n    for(let i = 0; i < stops.length; i++){\n        for(let j = 0; j < allStops.length; j++){\n            if(stops[i] === allStops[j][\"stop_name\"]){\n                result.push(allStops[j][\"stop_id\"])\n            }\n        }\n    }\n    return result\n}\n\n\n//STOPS\n\nexport async function getStops() {\n    return await sendGetRequest(backUrl + 'stops')\n}\n\n\nexport async function updateStop(state){\n    return await sendPostRequest(backUrl + 'stop/' + state.oldId, stopToJson(state))\n}\n\nexport async function deleteStop(id, state){\n    return await sendPostRequest(backUrl + 'delete/stop/' + id, stopToJson(state))\n}\n\nfunction stopToJson(state) {\n    let json = JSON.stringify({\n        \"stop_id\": state.id,\n        \"stop_name\": state.name\n    })\n    console.log(\"SEND POST: \" + json)\n    return json\n}\n\n\n//EMPLOYEES\n\nexport async function getEmployees() {\n    return await sendGetRequest(backUrl + 'employee/all')\n}\n\nexport async function getEmployee(id) {\n    console.log(\"req is coming\")\n    return await sendGetRequest(backUrl + 'employee/' + id)\n}\n\nexport async function updateEmployee(state){\n    return await sendPostRequest(backUrl + 'employee/' + state.oldId, employeeToJson(state))\n}\n\nexport async function deleteEmployee(id, state){\n    return await sendPostRequest(backUrl + 'delete/employee/' + id, employeeToJson(state))\n}\n\nfunction employeeToJson(state) {\n    let json = JSON.stringify({\n        \"id\": state.id,\n        \"name\": state.name,\n        \"surname\": state.surname,\n        \"route_number\": state.route_number\n    })\n    console.log(\"SEND POST: \" + json)\n    return json\n}\n\n\n//REQUESTS\n\n\nfunction sendGetRequest(requestUrl){\n    // Simple POST request with a JSON body using fetch\n    const requestOptions = {\n        method: 'Get',\n        headers: {},\n        // body: JSON.stringify({ title: 'React Get Request Example' })\n    };\n    return fetch(requestUrl, requestOptions).then(response => response.json())\n        .then((responseData) => {\n            return responseData;\n        })\n}\n\n\n\nfunction convertTimeTable(timeTable){\n    let result = []\n    for(let i = 0; i < timeTable.length; i++){\n        result.push(parseInt(timeTable[i]))\n    }\n    return result\n}\n\nfunction routeToJson(state) {\n    let intStops = convertStopsToInt(state.stops, state.allStops)\n    let intTimeTable = convertTimeTable(state.timeTable.slice(1))\n    return JSON.stringify({\n        \"routeId\": state.number,\n        \"stops\": intStops,\n        \"startTime\": state.startTime,\n        \"endTime\": state.endTime,\n        \"interval\": state.interval,\n        \"type\": typeToInt(state.type),\n        \"timetable\": intTimeTable})\n}\n\n\n\nfunction sendPostRequest(url, body){\n    // Simple POST request with a JSON body using fetch\n\n    const requestOptions = {\n        method: 'Post',\n        headers: { 'Content-Type': 'application/json' },\n        body: body\n    };\n    return fetch(url, requestOptions).then(response => response.json())\n        .then((responseData) => {\n            return responseData;\n        })\n}\n\nfunction typeToInt(type){\n    switch (type) {\n        case \"Тролейбус\":\n            return 1;\n        case \"Автобус\":\n            return 2;\n        case \"Трамвай\":\n            return 3;\n        default:\n            return 1;\n\n    }\n}\n\nasync function postData(url = '', data = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *client\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return await response.json(); // parses JSON response into native JavaScript objects\n}\n\npostData('https://example.com/answer', { answer: 42 })\n    .then((data) => {\n        console.log(data); // JSON data parsed by `response.json()` call\n    });"]},"metadata":{},"sourceType":"module"}