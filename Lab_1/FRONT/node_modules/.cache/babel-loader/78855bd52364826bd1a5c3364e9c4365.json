{"ast":null,"code":"var _jsxFileName = \"/home/sadoffnick/Desktop/University_Labs-782d16d9e93f5f21f9b7569cd8b73d90f641c7f6/semester_6/Object-oriented_programming/Labs/Lab_1/FRONT/src/models/TimeTableObject.js\";\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport * as API from \"../API\";\nimport { withRouter } from 'react-router-dom';\nimport TimeTableForm from \"../components/additional-components/TimeTableForm\";\nimport NavBar from \"../components/nav-bar\";\nimport styles from \"../styles/General.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class TimeTableObject extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.GetTimeTable().then(routes => {\n        if (routes.length === 0) {\n          this.setState({\n            incorrectRoute: true\n          });\n        } else {\n          let newStops = new Map();\n          let stopsNames = routes[0][\"stops\"];\n          let tt = routes[0][\"timetable\"];\n          newStops.set(stopsNames[0], 0);\n\n          for (let i = 0; i < tt.length; i++) {\n            newStops.set(stopsNames[i + 1], tt[i]);\n          }\n\n          this.setState({\n            number: routes[0][\"routeId\"],\n            startTime: routes[0][\"startTime\"],\n            endTime: routes[0][\"endTime\"],\n            interval: routes[0][\"interval\"],\n            stops: newStops,\n            incorrectRoute: false\n          }, function () {\n            console.log(\"ST: \" + this.state.startTime);\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      number: props.routeId,\n      startTime: \"06:40\",\n      endTime: \"00:20\",\n      interval: 10,\n      stops: new Map()\n    };\n  }\n\n  getCurrentTime() {\n    let timeStr = new Date().toLocaleString().split(\",\")[1];\n    let result = parseInt(timeStr.split(':')[0]) * 60 + parseInt(timeStr.split(':')[1]);\n    let pm = timeStr.split(\" \")[2];\n\n    if (pm === \"PM\") {\n      result += 12 * 60;\n    }\n\n    return result.toString();\n  }\n\n  toNormalTime(value) {\n    let hours = Math.floor(value / 60) % 24;\n    return Math.floor(hours / 10).toString() + (hours % 10).toString() + \":\" + Math.floor(value % 60 / 10).toString() + (value % 60 % 10).toString();\n  }\n\n  toTimePeriod(value) {\n    if (value < 60) {\n      return value.toString() + \" minutes.\";\n    } else {\n      let hours = Math.floor(value / 60).toString();\n      value %= 60;\n      return hours + \"hours and \" + value.toString() + \" minutes.\";\n    }\n  }\n\n  timeToInt(timeStr) {\n    return parseInt(timeStr.split(':')[0]) * 60 + parseInt(timeStr.split(':')[1]);\n  }\n\n  countTimeToStops() {\n    let timeToStops = new Map();\n    let currentTime = this.getCurrentTime();\n    let currentBus = this.timeToInt(this.state.endTime);\n\n    while (currentBus - this.state.interval > currentTime) currentBus -= this.state.interval;\n\n    while (currentBus + this.totalTime > currentTime) {\n      let a = 0;\n\n      for (let [key, value] of this.state.stops.entries()) {\n        a += value;\n\n        if (currentBus + a - currentTime >= 0) {\n          timeToStops.set(key, currentBus + a - currentTime);\n        }\n      }\n\n      currentBus -= this.state.interval;\n    }\n\n    return timeToStops;\n  }\n\n  listTime(timeToStops) {\n    let list = [];\n    timeToStops.forEach((value, key) => list.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 59\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 73\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 55\n    }, this)));\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this);\n  }\n\n  async GetTimeTable() {\n    return await API.getRouteById(this.state.number);\n  }\n\n  AddButton() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TimeTableForm, {\n        currentId: this.state.number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    if (this.state.incorrectRoute) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.MainBodyContainer,\n        children: [this.AddButton(), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"\\u041C\\u0430\\u0440\\u0448\\u0443\\u0440\\u0443\\u0442\\u0443 \\u0437 \\u043D\\u043E\\u043C\\u0435\\u0440\\u043E\\u043C \", this.state.number, \" \\u043D\\u0435 \\u0437\\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this);\n    }\n\n    this.totalTime = 0;\n    this.state.stops.forEach((value, key) => this.totalTime += value);\n    let currentTime = this.getCurrentTime();\n    let timeToStops = this.countTimeToStops();\n    let listStopTimes = this.listTime(timeToStops);\n\n    if (this.state === undefined || this.state.number === undefined || isNaN(this.state.number)) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.MainBodyContainer,\n        children: [/*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/timetables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), this.AddButton(), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041F\\u043E\\u0442\\u043E\\u0447\\u043D\\u0438\\u0439 \\u0447\\u0430\\u0441: \", this.toNormalTime(currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.MainBodyContainer,\n        children: [/*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/timetables\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), this.AddButton(), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041F\\u043E\\u0442\\u043E\\u0447\\u043D\\u0438\\u0439 \\u0447\\u0430\\u0441: \", this.toNormalTime(currentTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u043C\\u0430\\u0440\\u0448\\u0440\\u0443\\u0442\\u0443: \", this.state.number]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041F\\u0435\\u0440\\u0448\\u0438\\u0439 \\u0440\\u0435\\u0439\\u0441: \", this.state.startTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041E\\u0441\\u0442\\u0430\\u043D\\u043D\\u0456\\u0439 \\u0440\\u0435\\u0439\\u0441: \", this.state.endTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0406\\u043D\\u0442\\u0435\\u0440\\u0432\\u0430\\u043B: \", this.toTimePeriod(this.state.interval)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"\\u041E\\u0447\\u0456\\u043A\\u0443\\u0439\\u0442\\u0435 \\u043D\\u0430\\u0441\\u0442\\u0443\\u043F\\u043D\\u0438\\u0439 \\u0442\\u0440\\u0430\\u043D\\u0441\\u043F\\u043E\\u0440\\u0442 \\u0432 \\u0442\\u0430\\u043A\\u0438\\u0439 \\u0447\\u0430\\u0441: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 68\n          }, this), listStopTimes]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/sadoffnick/Desktop/University_Labs-782d16d9e93f5f21f9b7569cd8b73d90f641c7f6/semester_6/Object-oriented_programming/Labs/Lab_1/FRONT/src/models/TimeTableObject.js"],"names":["React","Redirect","API","withRouter","TimeTableForm","NavBar","styles","TimeTableObject","Component","constructor","props","componentDidMount","GetTimeTable","then","routes","length","setState","incorrectRoute","newStops","Map","stopsNames","tt","set","i","number","startTime","endTime","interval","stops","console","log","state","catch","error","routeId","getCurrentTime","timeStr","Date","toLocaleString","split","result","parseInt","pm","toString","toNormalTime","value","hours","Math","floor","toTimePeriod","timeToInt","countTimeToStops","timeToStops","currentTime","currentBus","totalTime","a","key","entries","listTime","list","forEach","push","getRouteById","AddButton","render","MainBodyContainer","listStopTimes","undefined","isNaN"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport * as API from \"../API\";\nimport { withRouter } from 'react-router-dom';\nimport TimeTableForm from \"../components/additional-components/TimeTableForm\";\nimport NavBar from \"../components/nav-bar\";\nimport styles from \"../styles/General.module.css\";\n\n\n\nexport class TimeTableObject extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            number : props.routeId,\n            startTime : \"06:40\",\n            endTime : \"00:20\",\n            interval : 10,\n            stops : new Map()\n        }\n    }\n\n    getCurrentTime() {\n        let timeStr = new Date().toLocaleString().split(\",\")[1]\n        let result = parseInt(timeStr.split(':')[0]) * 60 + parseInt(timeStr.split(':')[1])\n        let pm = timeStr.split(\" \")[2]\n        if(pm === \"PM\"){\n            result += (12 * 60);\n        }\n        return result.toString()\n    }\n\n    toNormalTime(value){\n        let hours = (Math.floor(value/60) % 24)\n        return(Math.floor(hours/10)).toString() +\n            ((hours) % 10).toString() +\n            \":\" +\n            (Math.floor((value % 60)/10)).toString() +\n            ((value % 60) % 10).toString();\n\n    }\n\n    toTimePeriod(value){\n        if(value < 60){\n            return value.toString() + \" minutes.\";\n        } else {\n            let hours = Math.floor(value/60).toString();\n            value %= 60;\n            return hours + \"hours and \" + value.toString() + \" minutes.\";\n        }\n    }\n\n    timeToInt(timeStr){\n        return parseInt(timeStr.split(':')[0]) * 60 + parseInt(timeStr.split(':')[1])\n    }\n\n    countTimeToStops(){\n        let timeToStops = new Map();\n\n        let currentTime = this.getCurrentTime()\n        let currentBus = this.timeToInt(this.state.endTime);\n        while(currentBus - this.state.interval > currentTime) currentBus-=this.state.interval;\n\n        while(currentBus + this.totalTime > currentTime){\n            let a = 0;\n            for (let [key, value] of  this.state.stops.entries()) {\n                a += value;\n                if(currentBus + a - currentTime  >= 0){\n                    timeToStops.set(key, currentBus + a - currentTime);\n                }\n\n            }\n            currentBus -= this.state.interval;\n        }\n\n        return timeToStops;\n    }\n\n    listTime(timeToStops){\n        let list = []\n        timeToStops.forEach((value, key) => list.push(<tr><td>{key}</td><td>{value}</td></tr>));\n        return (\n            <table>{list}</table>\n        );\n    }\n\n    componentDidMount = () => {\n        this.GetTimeTable().then((routes) => {\n            if(routes.length === 0){\n                this.setState({\n                    incorrectRoute: true\n                })\n            } else {\n                let newStops = new Map()\n                let stopsNames = routes[0][\"stops\"]\n                let tt = routes[0][\"timetable\"]\n                newStops.set(stopsNames[0], 0)\n                for(let i = 0; i < tt.length; i++){\n                    newStops.set(stopsNames[i+1], tt[i])\n                }\n                this.setState({\n                    number : routes[0][\"routeId\"],\n                    startTime : routes[0][\"startTime\"],\n                    endTime : routes[0][\"endTime\"],\n                    interval : routes[0][\"interval\"],\n                    stops : newStops,\n                    incorrectRoute : false\n                }, function () {\n                    console.log(\"ST: \" + this.state.startTime)\n                })\n\n            }\n\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n\n    async GetTimeTable() {\n        return await API.getRouteById(this.state.number)\n    }\n\n    AddButton(){\n        return (\n            <div>\n                <TimeTableForm currentId = {this.state.number}/>\n            </div>\n        )\n    }\n\n    render(){\n\n        if(this.state.incorrectRoute){\n            return (\n                <div className={styles.MainBodyContainer}>\n                    {this.AddButton()}\n                    <h1>Маршуруту з номером {this.state.number} не знайдено.</h1>\n                </div>\n            )\n        }\n        this.totalTime = 0;\n\n        this.state.stops.forEach((value, key) => this.totalTime += value);\n        let currentTime = this.getCurrentTime();\n        let timeToStops = this.countTimeToStops();\n        let listStopTimes = this.listTime(timeToStops)\n        if(this.state === undefined || this.state.number === undefined || isNaN(this.state.number)){\n            return  <div className={styles.MainBodyContainer}>\n                    <Redirect to={\"/timetables\"}/>\n                    {this.AddButton()}\n                    <p>Поточний час: {this.toNormalTime(currentTime)}</p>\n                </div>\n        } else {\n            return (\n                <div className={styles.MainBodyContainer}>\n                    <Redirect to={\"/timetables\"}/>\n                    {this.AddButton()}\n                    <p>Поточний час: {this.toNormalTime(currentTime)}</p>\n                    <p>Номер маршруту: {this.state.number}</p>\n                    <p>Перший рейс: {this.state.startTime}</p>\n                    <p>Останній рейс: {this.state.endTime}</p>\n                    <p>Інтервал: {this.toTimePeriod(this.state.interval)}</p>\n                    <div>Очікуйте наступний транспорт в такий час: <br/>{listStopTimes}</div>\n                </div>\n            )\n        }\n\n\n\n\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}