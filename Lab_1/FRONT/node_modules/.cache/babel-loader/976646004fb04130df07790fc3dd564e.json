{"ast":null,"code":"var _jsxFileName = \"/home/sadoffnick/Desktop/University_Labs-782d16d9e93f5f21f9b7569cd8b73d90f641c7f6/semester_6/Object-oriented_programming/Labs/Lab_1/FRONT/src/pages/Routes/Routes.js\";\nimport React from \"react\";\nimport * as API from \"../../API.js\";\nimport generalStyles from \"../../styles/General.module.css\";\nimport styles from \"../../styles/Routes.module.css\";\nimport { RouteObject } from \"../../models/RouteObject\";\nimport Checkbox from \"../../components/additional-components/Checkbox\";\nimport { Link } from 'react-router-dom';\nimport NavBar from \"../../components/nav-bar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst routeTypes = ['Тролейбус', 'Автобус', 'Трамвай'];\n\nclass Routes extends React.Component {\n  makeSubset(subset, routes) {\n    let selectedRoutes = routes.filter(route => subset.has(this.getType(route[\"type\"]))); // console.log(\"SUBSET: \" + selectedRoutes)\n\n    let list = selectedRoutes.map(route => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(RouteObject, {\n        routeProps: route\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 48\n    }, this));\n    return list;\n  }\n\n  async GetRoutes() {\n    return await API.getRoutes();\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {\n      this.GetRoutes().then(routes => {\n        this.setState({\n          routes: routes\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.componentWillMount = () => {\n      this.selectedCheckboxes = new Set();\n    };\n\n    this.toggleCheckbox = label => {\n      if (this.selectedCheckboxes.has(label)) {\n        this.selectedCheckboxes.delete(label);\n      } else {\n        this.selectedCheckboxes.add(label);\n      }\n\n      let newDisplayRoutes = this.state.routes.filter(route => this.selectedCheckboxes.has(this.getType(route[\"type\"])));\n      this.setState({\n        displayRoutes: newDisplayRoutes,\n        counted: true\n      }, function () {\n        console.log(this.state);\n      });\n    };\n\n    this.createCheckbox = label => /*#__PURE__*/_jsxDEV(Checkbox, {\n      label: label,\n      className: generalStyles.checkbox,\n      handleCheckboxChange: this.toggleCheckbox\n    }, label, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this);\n\n    this.createCheckboxes = () => routeTypes.map(this.createCheckbox);\n\n    this.state = {\n      displayRoutes: [],\n      routes: []\n    };\n  }\n\n  getType(number) {\n    switch (number) {\n      case 1:\n        return \"Тролейбус\";\n\n      case 2:\n        return \"Автобус\";\n\n      case 3:\n        return \"Трамвай\";\n\n      default:\n        return \"Тролейбус\";\n    }\n  }\n\n  getSubsetNumber(subset) {\n    let number = 0;\n    if (subset.has(\"Тролейбус\")) number += 1;\n    if (subset.has(\"Автобус\")) number += 2;\n    if (subset.has(\"Трамвай\")) number += 4;\n    return number;\n  }\n\n  makeStopList(stops) {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: stops.map(stop => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: stop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 42\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this);\n  }\n\n  makeRoutesList(routes) {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.listOfRoutes,\n      children: routes.map(route => /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/timetables?routeId=\" + route[\"routeId\"],\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.listElement,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.routeCard,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.listText,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [this.getType(route[\"type\"]), \" \\u043D\\u043E\\u043C\\u0435\\u0440 \", route[\"routeId\"]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 50\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.listText,\n              children: [\"\\u041F\\u043E\\u0447\\u0430\\u0442\\u043E\\u043A \\u0440\\u0443\\u0445\\u0443: \", route[\"startTime\"]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.listText,\n              children: [\"\\u041E\\u0441\\u0442\\u0430\\u043D\\u043D\\u0456\\u0439 \\u043C\\u0430\\u0440\\u0448\\u0440\\u0443\\u0442: \", route[\"endTime\"]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.listText,\n              children: [\"\\u041C\\u0430\\u0440\\u0448\\u0440\\u0443\\u0442 \\u0437\\u0443\\u043F\\u0438\\u043D\\u043E\\u043A:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 70\n              }, this), this.makeStopList(route[\"stops\"])]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, route[\"routeId\"], false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 129\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 76\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this);\n  }\n\n  render() {\n    let list = this.makeRoutesList(this.state.displayRoutes);\n\n    if (this.state.counted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: generalStyles.MainApp,\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          fatherlink: '/'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: generalStyles.MainBodyContainer,\n          children: [this.createCheckboxes(), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: generalStyles.container,\n            children: list\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: generalStyles.MainApp,\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          fatherlink: '/'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: generalStyles.MainBodyContainer,\n          children: [this.createCheckboxes(), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"No list here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Routes;","map":{"version":3,"sources":["/home/sadoffnick/Desktop/University_Labs-782d16d9e93f5f21f9b7569cd8b73d90f641c7f6/semester_6/Object-oriented_programming/Labs/Lab_1/FRONT/src/pages/Routes/Routes.js"],"names":["React","API","generalStyles","styles","RouteObject","Checkbox","Link","NavBar","routeTypes","Routes","Component","makeSubset","subset","routes","selectedRoutes","filter","route","has","getType","list","map","GetRoutes","getRoutes","constructor","props","componentDidMount","then","setState","catch","error","console","log","componentWillMount","selectedCheckboxes","Set","toggleCheckbox","label","delete","add","newDisplayRoutes","state","displayRoutes","counted","createCheckbox","checkbox","createCheckboxes","number","getSubsetNumber","makeStopList","stops","stop","makeRoutesList","listOfRoutes","listElement","routeCard","listText","render","MainApp","MainBodyContainer","container"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as API from \"../../API.js\"\nimport generalStyles from \"../../styles/General.module.css\"\nimport styles from \"../../styles/Routes.module.css\"\nimport {RouteObject} from \"../../models/RouteObject\"\nimport Checkbox from \"../../components/additional-components/Checkbox\";\nimport { Link } from 'react-router-dom'\nimport NavBar from \"../../components/nav-bar\";\n\n\nconst routeTypes = [\n    'Тролейбус',\n    'Автобус',\n    'Трамвай',\n];\n\nclass Routes extends React.Component {\n\n    makeSubset(subset, routes){\n        let selectedRoutes = routes.filter(route => subset.has(this.getType(route[\"type\"])))\n       // console.log(\"SUBSET: \" + selectedRoutes)\n        let list = selectedRoutes.map(route => <li><RouteObject routeProps = {route}/></li>);\n        return list\n    }\n\n    componentDidMount = () => {\n        this.GetRoutes().then((routes) => {\n            this.setState({\n                routes : routes\n            })\n        }).catch((error) => {\n            console.log(error);\n        });\n    }\n\n    async GetRoutes() {\n        return await API.getRoutes()\n    }\n\n    constructor(props) {\n        super(props);\n        this.state ={\n            displayRoutes: [],\n            routes: []\n        }\n    }\n\n    componentWillMount = () => {\n        this.selectedCheckboxes = new Set();\n    }\n\n    getType(number){\n        switch (number) {\n            case 1:\n                return \"Тролейбус\";\n            case 2:\n                return \"Автобус\";\n            case 3:\n                return \"Трамвай\";\n            default:\n                return \"Тролейбус\";\n        }\n    }\n\n    getSubsetNumber(subset){\n        let number = 0\n        if(subset.has(\"Тролейбус\"))\n            number += 1\n        if(subset.has(\"Автобус\"))\n            number += 2\n        if(subset.has(\"Трамвай\"))\n            number += 4\n        return number;\n    }\n\n    toggleCheckbox = label => {\n        if (this.selectedCheckboxes.has(label)) {\n            this.selectedCheckboxes.delete(label);\n        } else {\n            this.selectedCheckboxes.add(label);\n        }\n        let newDisplayRoutes = this.state.routes.filter(route => this.selectedCheckboxes.has(this.getType(route[\"type\"])))\n        this.setState({\n            displayRoutes: newDisplayRoutes,\n            counted: true\n        }, function () {\n            console.log(this.state);\n        })\n    }\n\n    createCheckbox = label => (\n        <Checkbox\n            label={label}\n            className={generalStyles.checkbox}\n            handleCheckboxChange={this.toggleCheckbox}\n            key={label}\n        />\n    )\n\n    createCheckboxes = () => (\n        routeTypes.map(this.createCheckbox)\n    )\n\n    makeStopList(stops){\n        return (<ul>{stops.map((stop) => <li>{stop}</li>)}</ul>)\n    }\n\n    makeRoutesList(routes){\n        return (<ul className={styles.listOfRoutes}>{routes.map((route) => <Link to={\"/timetables?routeId=\" + route[\"routeId\"]}><li key={route[\"routeId\"]} className = {styles.listElement}>\n            <div  className={styles.routeCard}>\n                <div className={styles.listText}><p>{this.getType(route[\"type\"])} номер {route[\"routeId\"]}</p></div>\n                    <div className={styles.listText}>Початок руху: {route[\"startTime\"]}</div>\n                    <div className={styles.listText}>Останній маршрут: {route[\"endTime\"]}</div>\n\n                    <div className={styles.listText}>Маршрут зупинок:<br/>\n                        {this.makeStopList(route[\"stops\"])}</div>\n\n            </div></li></Link>)}</ul>);\n    }\n\n\n    render() {\n        let list = this.makeRoutesList(this.state.displayRoutes)\n        if(this.state.counted){\n            return (\n                <div className={generalStyles.MainApp}>\n                    <NavBar fatherlink={'/'}/>\n                    <div className={generalStyles.MainBodyContainer}>\n                    {this.createCheckboxes()}\n                    <div className={generalStyles.container}>\n                        {list}\n                    </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className={generalStyles.MainApp}>\n                    <NavBar fatherlink={'/'}/>\n                    <div className={generalStyles.MainBodyContainer}>\n                    {this.createCheckboxes()}\n                        <ul>\n                            <li>No list here</li>\n                        </ul>\n                    </div>\n                </div>\n            );\n        }\n\n    }\n}\n\nexport default Routes;"]},"metadata":{},"sourceType":"module"}